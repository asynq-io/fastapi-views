{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"fastapi-views","text":"<p>FastAPI Class Views and utilities</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install fastapi-views\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from typing import ClassVar, Optional\nfrom uuid import UUID\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nfrom fastapi_views import ViewRouter, configure_app\nfrom fastapi_views.views.viewsets import AsyncAPIViewSet\n\n\nclass ItemSchema(BaseModel):\n    id: UUID\n    name: str\n    price: int\n\n\nclass MyViewSet(AsyncAPIViewSet):\n    api_component_name = \"Item\"\n    response_schema = ItemSchema\n    items: ClassVar[dict[UUID, ItemSchema]] = {}\n\n    async def list(self) -&gt; list[ItemSchema]:\n        return list(self.items.values())\n\n    async def create(self, item: ItemSchema) -&gt; ItemSchema:\n        self.items[item.id] = item\n        return item\n\n    async def retrieve(self, id: UUID) -&gt; Optional[ItemSchema]:\n        return self.items.get(id)\n\n    async def update(self, item: ItemSchema) -&gt; None:\n        self.items[item.id] = item\n\n    async def destroy(self, id: UUID) -&gt; None:\n        self.items.pop(id, None)\n\n\nrouter = ViewRouter(prefix=\"/items\")\nrouter.register_view(MyViewSet)\n\napp = FastAPI(title=\"My API\")\napp.include_router(router)\n\nconfigure_app(app)\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Class Based Views</li> <li>APIViews</li> <li>ViewSets</li> <li>Both async and sync function support</li> <li>No dependencies on ORM</li> <li>OpenAPI operation id simplification</li> <li>'Smart' and fast serialization using Pydantic v2</li> <li>Http Problem Details implementation (both models &amp; exception classes)</li> <li>Automatic prometheus metrics exporter</li> <li>Optional Opentelemetry instrumentation with <code>correlation_id</code> in error responses</li> <li>CLI for generating OpenAPI documentation file</li> <li>Pagination types &amp; schemas</li> <li>Advanced drf-like filters</li> </ul>"},{"location":"reference/views/","title":"APIViews","text":""},{"location":"reference/views/#fastapi_views.views.api.APIView","title":"<code>APIView</code>","text":"<p>               Bases: <code>View</code>, <code>ErrorHandlerMixin</code>, <code>Generic[T]</code></p> <p>View with build-in json serialization via <code>serializer</code> and error handling</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class APIView(View, ErrorHandlerMixin, Generic[T]):\n    \"\"\"\n    View with build-in json serialization via\n    `serializer` and error handling\n    \"\"\"\n\n    content_type: str = \"application/json\"\n    response_schema: Optional[T] = None\n    default_serializer_options: ClassVar[SerializerOptions] = {\n        \"by_alias\": True,\n    }\n    default_errors: tuple[type[APIError], ...] = (BadRequest,)\n\n    def __init__(self, request: Request, response: Response) -&gt; None:\n        self.validation_context = None\n        self.serializer_options: SerializerOptions = dict(\n            **self.default_serializer_options\n        )\n        response.headers[\"Content-Type\"] = self.content_type\n        super().__init__(request, response)\n\n    @classmethod\n    def get_api_action(\n        cls,\n        endpoint: Callable,\n        prefix: str = \"\",\n        path: str = \"\",\n        action: Optional[Action] = None,\n        extra_errors: tuple[type[APIError], ...] = (),\n        **kwargs: Any,\n    ) -&gt; dict[str, Any]:\n        if action:\n            kwargs.setdefault(\"name\", f\"{action.title()} {cls.get_name()}\")\n            kwargs.setdefault(\"operation_id\", f\"{action}_{cls.get_slug_name()}\")\n\n        kwargs.setdefault(\"response_model\", cls.get_response_schema(action))\n        kwargs.setdefault(\"responses\", errors(*extra_errors, *cls.default_errors))\n        return super().get_api_action(endpoint, prefix=prefix, path=path, **kwargs)\n\n    @classmethod\n    def get_status_code(cls, endpoint: str, default: int = HTTP_200_OK) -&gt; int:\n        method = getattr(cls, endpoint, None)\n        return getattr(method, \"kwargs\", {}).get(\"status_code\", default)\n\n    @classmethod\n    def get_response_schema(cls, action: Optional[Action] = None) -&gt; Optional[T]:  # noqa: ARG003\n        return cls.response_schema\n\n    def get_json_content(self, content: Any, serializer: TypeAdapter[Any]) -&gt; Any:\n        if self.validate_response:\n            content = serializer.validate_python(\n                content,\n                from_attributes=self.from_attributes,\n                context=self.validation_context,\n            )\n        return serializer.dump_json(content, **self.serializer_options)\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.AsyncCreateAPIView","title":"<code>AsyncCreateAPIView</code>","text":"<p>               Bases: <code>BaseCreateAPIView</code>, <code>Generic[P]</code></p> <p>Async create api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class AsyncCreateAPIView(BaseCreateAPIView, Generic[P]):\n    \"\"\"Async create api view\"\"\"\n\n    @classmethod\n    def get_create_endpoint(cls, status_code: int) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"create\")\n\n        async def endpoint(\n            self: AsyncCreateAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            obj = await self.create(*args, **kwargs)\n            location = self.get_location(obj)\n            if location:\n                self.response.headers[\"location\"] = location\n            if self.return_on_create:\n                return self.get_response(obj, status_code=status_code, schema=schema)\n            return Response(status_code=status_code)\n\n        cls._patch_endpoint_signature(endpoint, cls.create)\n        return endpoint\n\n    @abstractmethod\n    async def create(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.AsyncDestroyAPIView","title":"<code>AsyncDestroyAPIView</code>","text":"<p>               Bases: <code>BaseDestroyAPIView</code>, <code>Generic[P]</code></p> <p>Async destroy api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class AsyncDestroyAPIView(BaseDestroyAPIView, Generic[P]):\n    \"\"\"Async destroy api view\"\"\"\n\n    @classmethod\n    def get_destroy_endpoint(cls, status_code: int) -&gt; Endpoint:\n        async def endpoint(\n            self: AsyncDestroyAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            await self.destroy(*args, **kwargs)\n            return Response(status_code=status_code)\n\n        cls._patch_endpoint_signature(endpoint, cls.destroy)\n        return endpoint\n\n    @abstractmethod\n    async def destroy(self, *args: P.args, **kwargs: P.kwargs) -&gt; None:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.AsyncListAPIView","title":"<code>AsyncListAPIView</code>","text":"<p>               Bases: <code>BaseListAPIView</code>, <code>ABC</code>, <code>Generic[P]</code></p> <p>Async list api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class AsyncListAPIView(BaseListAPIView, ABC, Generic[P]):\n    \"\"\"Async list api view\"\"\"\n\n    @classmethod\n    def get_list_endpoint(cls) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"list\")\n\n        async def endpoint(\n            self: AsyncListAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            objects = await self.list(*args, **kwargs)\n            return self.get_response(objects, status_code=HTTP_200_OK, schema=schema)\n\n        cls._patch_endpoint_signature(endpoint, cls.list)\n        return endpoint\n\n    @abstractmethod\n    async def list(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.AsyncPartialUpdateAPIView","title":"<code>AsyncPartialUpdateAPIView</code>","text":"<p>               Bases: <code>BasePartialUpdateAPIView</code>, <code>Generic[P]</code></p> <p>Async partial update api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class AsyncPartialUpdateAPIView(BasePartialUpdateAPIView, Generic[P]):\n    \"\"\"Async partial update api view\"\"\"\n\n    @classmethod\n    def get_partial_update_endpoint(cls) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"partial_update\")\n\n        async def endpoint(\n            self: AsyncPartialUpdateAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            obj = await self.partial_update(*args, **kwargs)\n            if obj is None and self.raise_on_none:\n                self.raise_not_found_error()\n            if self.return_on_update:\n                return self.get_response(obj, schema=schema)\n            return Response(status_code=HTTP_200_OK)\n\n        cls._patch_endpoint_signature(endpoint, cls.partial_update)\n        return endpoint\n\n    @abstractmethod\n    async def partial_update(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.AsyncRetrieveAPIView","title":"<code>AsyncRetrieveAPIView</code>","text":"<p>               Bases: <code>BaseRetrieveAPIView</code>, <code>Generic[P]</code></p> <p>Async retrieve api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class AsyncRetrieveAPIView(BaseRetrieveAPIView, Generic[P]):\n    \"\"\"Async retrieve api view\"\"\"\n\n    @classmethod\n    def get_retrieve_endpoint(cls) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"retrieve\")\n\n        async def endpoint(\n            self: AsyncRetrieveAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            obj = await self.retrieve(*args, **kwargs)\n            if obj is None and self.raise_on_none:\n                self.raise_not_found_error()\n            return self.get_response(obj, schema=schema)\n\n        cls._patch_endpoint_signature(endpoint, cls.retrieve)\n        return endpoint\n\n    @abstractmethod\n    async def retrieve(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.AsyncUpdateAPIView","title":"<code>AsyncUpdateAPIView</code>","text":"<p>               Bases: <code>BaseUpdateAPIView</code>, <code>Generic[P]</code></p> <p>Async update api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class AsyncUpdateAPIView(BaseUpdateAPIView, Generic[P]):\n    \"\"\"Async update api view\"\"\"\n\n    @classmethod\n    def get_update_endpoint(cls, status_code: int) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"update\")\n\n        async def endpoint(\n            self: AsyncUpdateAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            obj = await self.update(*args, **kwargs)\n            if not self.return_on_update:\n                return Response(status_code=status_code)\n            if obj is None and self.raise_on_none:\n                self.raise_not_found_error()\n            return self.get_response(obj, status_code=status_code, schema=schema)\n\n        cls._patch_endpoint_signature(endpoint, cls.update)\n        return endpoint\n\n    @abstractmethod\n    async def update(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.CreateAPIView","title":"<code>CreateAPIView</code>","text":"<p>               Bases: <code>BaseCreateAPIView</code>, <code>Generic[P]</code></p> <p>Sync create api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class CreateAPIView(BaseCreateAPIView, Generic[P]):\n    \"\"\"Sync create api view\"\"\"\n\n    @classmethod\n    def get_create_endpoint(cls, status_code: int) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"create\")\n\n        def endpoint(\n            self: CreateAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            obj = self.create(*args, **kwargs)\n            location = self.get_location(obj)\n            if location:\n                self.response.headers[\"location\"] = location\n            if self.return_on_create:\n                return self.get_response(obj, status_code=status_code, schema=schema)\n            return Response(status_code=status_code)\n\n        cls._patch_endpoint_signature(endpoint, cls.create)\n        return endpoint\n\n    @abstractmethod\n    def create(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.DestroyAPIView","title":"<code>DestroyAPIView</code>","text":"<p>               Bases: <code>BaseDestroyAPIView</code>, <code>Generic[P]</code></p> <p>Sync destroy api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class DestroyAPIView(BaseDestroyAPIView, Generic[P]):\n    \"\"\"Sync destroy api view\"\"\"\n\n    @classmethod\n    def get_destroy_endpoint(cls, status_code: int) -&gt; Endpoint:\n        def endpoint(\n            self: DestroyAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            self.destroy(*args, **kwargs)\n            return Response(status_code=status_code)\n\n        cls._patch_endpoint_signature(endpoint, cls.destroy)\n        return endpoint\n\n    @abstractmethod\n    def destroy(self, *args: P.args, **kwargs: P.kwargs) -&gt; None:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.ListAPIView","title":"<code>ListAPIView</code>","text":"<p>               Bases: <code>BaseListAPIView</code>, <code>ABC</code>, <code>Generic[P]</code></p> <p>Sync list api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class ListAPIView(BaseListAPIView, ABC, Generic[P]):\n    \"\"\"Sync list api view\"\"\"\n\n    @classmethod\n    def get_list_endpoint(cls) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"list\")\n\n        def endpoint(self: ListAPIView, *args: P.args, **kwargs: P.kwargs) -&gt; Response:\n            objects = self.list(*args, **kwargs)\n            return self.get_response(objects, status_code=HTTP_200_OK, schema=schema)\n\n        cls._patch_endpoint_signature(endpoint, cls.list)\n        return endpoint\n\n    @abstractmethod\n    def list(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.PartialUpdateAPIView","title":"<code>PartialUpdateAPIView</code>","text":"<p>               Bases: <code>BasePartialUpdateAPIView</code>, <code>Generic[P]</code></p> <p>Sync partial update api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class PartialUpdateAPIView(BasePartialUpdateAPIView, Generic[P]):\n    \"\"\"Sync partial update api view\"\"\"\n\n    @classmethod\n    def get_partial_update_endpoint(cls) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"partial_update\")\n\n        def endpoint(\n            self: PartialUpdateAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            obj = self.partial_update(*args, **kwargs)\n            if obj is None and self.raise_on_none:\n                self.raise_not_found_error()\n            if self.return_on_update:\n                return self.get_response(obj, schema=schema)\n            return Response(status_code=HTTP_200_OK)\n\n        cls._patch_endpoint_signature(endpoint, cls.partial_update)\n        return endpoint\n\n    @abstractmethod\n    def partial_update(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.RetrieveAPIView","title":"<code>RetrieveAPIView</code>","text":"<p>               Bases: <code>BaseRetrieveAPIView</code>, <code>Generic[P]</code></p> <p>Sync retrieve api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class RetrieveAPIView(BaseRetrieveAPIView, Generic[P]):\n    \"\"\"Sync retrieve api view\"\"\"\n\n    @classmethod\n    def get_retrieve_endpoint(cls) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"retrieve\")\n\n        def endpoint(\n            self: RetrieveAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            obj = self.retrieve(*args, **kwargs)\n            if obj is None and self.raise_on_none:\n                self.raise_not_found_error()\n            return self.get_response(obj, schema=schema)\n\n        cls._patch_endpoint_signature(endpoint, cls.retrieve)\n        return endpoint\n\n    @abstractmethod\n    def retrieve(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.UpdateAPIView","title":"<code>UpdateAPIView</code>","text":"<p>               Bases: <code>BaseUpdateAPIView</code>, <code>Generic[P]</code></p> <p>Sync update api view</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class UpdateAPIView(BaseUpdateAPIView, Generic[P]):\n    \"\"\"Sync update api view\"\"\"\n\n    @classmethod\n    def get_update_endpoint(cls, status_code: int) -&gt; Endpoint:\n        schema = cls.get_response_schema(action=\"update\")\n\n        def endpoint(\n            self: UpdateAPIView, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            obj = self.update(*args, **kwargs)\n            if not self.return_on_update:\n                return Response(status_code=status_code)\n            if obj is None and self.raise_on_none:\n                self.raise_not_found_error()\n            return self.get_response(obj, status_code=status_code, schema=schema)\n\n        cls._patch_endpoint_signature(endpoint, cls.update)\n        return endpoint\n\n    @abstractmethod\n    def update(self, *args: P.args, **kwargs: P.kwargs) -&gt; Any:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/views/#fastapi_views.views.api.View","title":"<code>View</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base View Class</p> Source code in <code>fastapi_views/views/api.py</code> <pre><code>class View(ABC):\n    \"\"\"\n    Base View Class\n    \"\"\"\n\n    api_component_name: str\n    errors: tuple[type[APIError], ...] = ()\n    from_attributes: Optional[bool] = None\n    validate_response: bool = True\n    _serializers: ClassVar[TypeAdapterMap] = {}\n\n    def __init__(self, request: Request, response: Response) -&gt; None:\n        self.request = request\n        self.response = response\n\n    @classmethod\n    def get_name(cls) -&gt; str:\n        return getattr(cls, \"api_component_name\", cls.__name__)\n\n    @classmethod\n    def get_slug_name(cls) -&gt; str:\n        return f\"{cls.get_name().lower().replace(' ', '_')}\"\n\n    def get_response(\n        self,\n        content: Any,\n        *,\n        status_code: int = HTTP_200_OK,\n        schema: Optional[T] = None,\n    ) -&gt; Response:\n        if not isinstance(content, (str, bytes, Response)):\n            serializer = self.get_serializer(schema) if schema else AnyTypeAdapter\n            content = self.get_json_content(content=content, serializer=serializer)\n\n        if isinstance(content, Response):\n            return content\n\n        self.response.status_code = status_code\n        if content is None:\n            return self.response\n\n        if isinstance(content, str):\n            content = content.encode(self.response.charset)\n        if isinstance(content, bytes):\n            self.response.body = content\n            self.response.headers[\"Content-Length\"] = str(len(content))\n        return self.response\n\n    def get_serializer(self, schema: T) -&gt; TypeAdapter[T]:\n        if schema not in self._serializers:\n            self._serializers[schema] = TypeAdapter(schema)\n        return self._serializers[schema]\n\n    def get_json_content(self, content: Any, serializer: TypeAdapter[Any]) -&gt; Any:\n        if self.validate_response:\n            content = serializer.validate_python(\n                content,\n                from_attributes=self.from_attributes,\n            )\n        return serializer.dump_json(content)\n\n    @classmethod\n    def get_api_actions(cls, prefix: str = \"\") -&gt; Generator[dict[str, Any], Any, None]:\n        yield from cls.get_custom_api_actions(prefix)\n\n    @classmethod\n    def get_custom_endpoint(\n        cls, func: Callable[Concatenate[\"View\", P], Any]\n    ) -&gt; Callable[Concatenate[\"View\", P], Any]:\n        options = getattr(func, \"kwargs\", {})\n        status_code = options.get(\"status_code\", HTTP_200_OK)\n        schema = options.get(\"response_model\", get_type_hints(func).get(\"return\"))\n\n        async def _async_endpoint(\n            self: View, *args: P.args, **kwargs: P.kwargs\n        ) -&gt; Response:\n            res = await func(self, *args, **kwargs)\n            return self.get_response(res, status_code=status_code, schema=schema)\n\n        def _sync_endpoint(self: View, *args: P.args, **kwargs: P.kwargs) -&gt; Response:\n            res = func(self, *args, **kwargs)\n            return self.get_response(res, status_code=status_code, schema=schema)\n\n        endpoint = (\n            _async_endpoint if asyncio.iscoroutinefunction(func) else _sync_endpoint\n        )\n\n        cls._patch_endpoint_signature(endpoint, func)\n        return endpoint\n\n    @classmethod\n    def get_custom_api_actions(\n        cls, prefix: str = \"\"\n    ) -&gt; Generator[dict[str, Any], None, None]:\n        for _, route_endpoint in inspect.getmembers(\n            cls, lambda member: callable(member) and hasattr(member, VIEWSET_ROUTE_FLAG)\n        ):\n            endpoint = cls.get_custom_endpoint(route_endpoint)\n            yield cls.get_api_action(\n                endpoint, prefix=prefix, name=f\"{endpoint.__name__} {cls.get_name()}\"\n            )\n\n    @classmethod\n    def get_api_action(\n        cls, endpoint: Callable, prefix: str = \"\", path: str = \"\", **kwargs: Any\n    ) -&gt; dict[str, Any]:\n        kw = getattr(endpoint, \"kwargs\", {})\n        kwargs.update(kw)\n        path = kwargs.get(\"path\", path)\n        kwargs[\"endpoint\"] = endpoint\n        kwargs[\"path\"] = prefix + path\n        kwargs.setdefault(\"name\", endpoint.__name__)\n        endpoint_name = kwargs[\"name\"]\n        kwargs.setdefault(\"methods\", [\"GET\"])\n        kwargs.setdefault(\"operation_id\", f\"{cls.get_slug_name()}_{endpoint_name}\")\n        kwargs[\"responses\"] = {\n            e.get_status(): {\"model\": e.model} for e in cls.errors\n        } | kwargs.get(\"responses\", {})\n        status_code = kwargs.get(\"status_code\")\n        if status_code and not is_body_allowed_for_status_code(status_code):\n            kwargs[\"response_model\"] = None\n        return kwargs\n\n    @classmethod\n    def _patch_endpoint_signature(cls, endpoint: Any, method: Callable) -&gt; None:\n        old_signature = inspect.signature(method)\n        old_parameters: list[inspect.Parameter] = list(\n            old_signature.parameters.values()\n        )\n        old_first_parameter = old_parameters[0]\n        new_first_parameter = old_first_parameter.replace(default=Depends(cls))\n        new_parameters = [new_first_parameter] + [\n            parameter.replace(kind=inspect.Parameter.KEYWORD_ONLY)\n            for parameter in old_parameters[1:]\n        ]\n        new_signature = old_signature.replace(parameters=new_parameters)\n        endpoint.__signature__ = new_signature\n        endpoint.__doc__ = method.__doc__\n        endpoint.__name__ = method.__name__\n        endpoint.kwargs = getattr(method, \"kwargs\", {})\n</code></pre>"},{"location":"reference/viewsets/","title":"View sets","text":""},{"location":"reference/viewsets/#fastapi_views.views.viewsets.APIViewSet","title":"<code>APIViewSet</code>","text":"<p>               Bases: <code>ListAPIView</code>, <code>CreateAPIView</code>, <code>RetrieveAPIView</code>, <code>UpdateAPIView</code>, <code>DestroyAPIView</code>, <code>ABC</code></p> <p>APIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class APIViewSet(\n    ListAPIView, CreateAPIView, RetrieveAPIView, UpdateAPIView, DestroyAPIView, ABC\n):\n    \"\"\"APIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.AsyncAPIViewSet","title":"<code>AsyncAPIViewSet</code>","text":"<p>               Bases: <code>AsyncListAPIView</code>, <code>AsyncCreateAPIView</code>, <code>AsyncRetrieveAPIView</code>, <code>AsyncUpdateAPIView</code>, <code>AsyncDestroyAPIView</code>, <code>ABC</code></p> <p>AsyncAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class AsyncAPIViewSet(\n    AsyncListAPIView,\n    AsyncCreateAPIView,\n    AsyncRetrieveAPIView,\n    AsyncUpdateAPIView,\n    AsyncDestroyAPIView,\n    ABC,\n):\n    \"\"\"AsyncAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.AsyncListCreateAPIViewSet","title":"<code>AsyncListCreateAPIViewSet</code>","text":"<p>               Bases: <code>AsyncListAPIView</code>, <code>AsyncCreateAPIView</code>, <code>ABC</code></p> <p>AsyncListCreateAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class AsyncListCreateAPIViewSet(AsyncListAPIView, AsyncCreateAPIView, ABC):\n    \"\"\"AsyncListCreateAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.AsyncListCreateDestroyAPIViewSet","title":"<code>AsyncListCreateDestroyAPIViewSet</code>","text":"<p>               Bases: <code>AsyncListAPIView</code>, <code>AsyncCreateAPIView</code>, <code>AsyncDestroyAPIView</code>, <code>ABC</code></p> <p>AsyncListCreateDestroyAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class AsyncListCreateDestroyAPIViewSet(\n    AsyncListAPIView, AsyncCreateAPIView, AsyncDestroyAPIView, ABC\n):\n    \"\"\"AsyncListCreateDestroyAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.AsyncListRetrieveUpdateDestroyAPIViewSet","title":"<code>AsyncListRetrieveUpdateDestroyAPIViewSet</code>","text":"<p>               Bases: <code>AsyncListAPIView</code>, <code>AsyncRetrieveAPIView</code>, <code>AsyncUpdateAPIView</code>, <code>AsyncDestroyAPIView</code>, <code>ABC</code></p> <p>AsyncListRetrieveUpdateDestroyAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class AsyncListRetrieveUpdateDestroyAPIViewSet(\n    AsyncListAPIView, AsyncRetrieveAPIView, AsyncUpdateAPIView, AsyncDestroyAPIView, ABC\n):\n    \"\"\"AsyncListRetrieveUpdateDestroyAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.AsyncReadOnlyAPIViewSet","title":"<code>AsyncReadOnlyAPIViewSet</code>","text":"<p>               Bases: <code>AsyncListAPIView</code>, <code>AsyncRetrieveAPIView</code>, <code>ABC</code></p> <p>AsyncReadOnlyAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class AsyncReadOnlyAPIViewSet(AsyncListAPIView, AsyncRetrieveAPIView, ABC):\n    \"\"\"AsyncReadOnlyAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.AsyncRetrieveUpdateAPIViewSet","title":"<code>AsyncRetrieveUpdateAPIViewSet</code>","text":"<p>               Bases: <code>AsyncRetrieveAPIView</code>, <code>AsyncUpdateAPIView</code>, <code>ABC</code></p> <p>AsyncRetrieveUpdateAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class AsyncRetrieveUpdateAPIViewSet(AsyncRetrieveAPIView, AsyncUpdateAPIView, ABC):\n    \"\"\"AsyncRetrieveUpdateAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.AsyncRetrieveUpdateDestroyAPIViewSet","title":"<code>AsyncRetrieveUpdateDestroyAPIViewSet</code>","text":"<p>               Bases: <code>AsyncRetrieveAPIView</code>, <code>AsyncUpdateAPIView</code>, <code>AsyncDestroyAPIView</code>, <code>ABC</code></p> <p>AsyncRetrieveUpdateDestroyAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class AsyncRetrieveUpdateDestroyAPIViewSet(\n    AsyncRetrieveAPIView, AsyncUpdateAPIView, AsyncDestroyAPIView, ABC\n):\n    \"\"\"AsyncRetrieveUpdateDestroyAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.ListCreateAPIViewSet","title":"<code>ListCreateAPIViewSet</code>","text":"<p>               Bases: <code>ListAPIView</code>, <code>CreateAPIView</code>, <code>ABC</code></p> <p>ListCreateAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class ListCreateAPIViewSet(ListAPIView, CreateAPIView, ABC):\n    \"\"\"ListCreateAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.ListCreateDestroyAPIViewSet","title":"<code>ListCreateDestroyAPIViewSet</code>","text":"<p>               Bases: <code>ListAPIView</code>, <code>CreateAPIView</code>, <code>DestroyAPIView</code>, <code>ABC</code></p> <p>ListCreateDestroyAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class ListCreateDestroyAPIViewSet(ListAPIView, CreateAPIView, DestroyAPIView, ABC):\n    \"\"\"ListCreateDestroyAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.ListRetrieveUpdateDestroyAPIViewSet","title":"<code>ListRetrieveUpdateDestroyAPIViewSet</code>","text":"<p>               Bases: <code>ListAPIView</code>, <code>RetrieveAPIView</code>, <code>UpdateAPIView</code>, <code>DestroyAPIView</code>, <code>ABC</code></p> <p>ListRetrieveUpdateDestroyAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class ListRetrieveUpdateDestroyAPIViewSet(\n    ListAPIView, RetrieveAPIView, UpdateAPIView, DestroyAPIView, ABC\n):\n    \"\"\"ListRetrieveUpdateDestroyAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.ReadOnlyAPIViewSet","title":"<code>ReadOnlyAPIViewSet</code>","text":"<p>               Bases: <code>ListAPIView</code>, <code>RetrieveAPIView</code>, <code>ABC</code></p> <p>ReadOnlyAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class ReadOnlyAPIViewSet(ListAPIView, RetrieveAPIView, ABC):\n    \"\"\"ReadOnlyAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.RetrieveUpdateAPIViewSet","title":"<code>RetrieveUpdateAPIViewSet</code>","text":"<p>               Bases: <code>RetrieveAPIView</code>, <code>UpdateAPIView</code>, <code>ABC</code></p> <p>RetrieveUpdateAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class RetrieveUpdateAPIViewSet(RetrieveAPIView, UpdateAPIView, ABC):\n    \"\"\"RetrieveUpdateAPIViewSet\"\"\"\n</code></pre>"},{"location":"reference/viewsets/#fastapi_views.views.viewsets.RetrieveUpdateDestroyAPIViewSet","title":"<code>RetrieveUpdateDestroyAPIViewSet</code>","text":"<p>               Bases: <code>RetrieveAPIView</code>, <code>UpdateAPIView</code>, <code>DestroyAPIView</code>, <code>ABC</code></p> <p>RetrieveUpdateDestroyAPIViewSet</p> Source code in <code>fastapi_views/views/viewsets.py</code> <pre><code>class RetrieveUpdateDestroyAPIViewSet(\n    RetrieveAPIView, UpdateAPIView, DestroyAPIView, ABC\n):\n    \"\"\"RetrieveUpdateDestroyAPIViewSet\"\"\"\n</code></pre>"},{"location":"usage/basic/","title":"Basic","text":"<pre><code>## View\n\nfrom fastapi import Depends, Request, Response\nfrom pydantic import BaseModel\n\nfrom fastapi_views import ViewRouter\nfrom fastapi_views.views import (\n    APIView,\n    AsyncListAPIView,\n    AsyncRetrieveAPIView,\n    View,\n    get,\n    post,\n)\n\n\nclass BasicView(View):\n    \"\"\"\n    Low level view, that handles responses exactly like FastAPI\n    \"\"\"\n\n    @get(\"\")\n    async def get_method(self):\n        return Response()\n\n    @post(\"\")\n    async def post_method(self):\n        return Response()\n\n\n## APIView\n\n\nclass APIModel(BaseModel):\n    id: int\n    name: str\n\n\nclass BasicAPIView(APIView):\n    \"\"\"\n    API view that populates\n    \"\"\"\n\n    response_schema = APIModel\n\n    @get(\"\")\n    async def get_item(self):\n        # automatically converted to APIModel\n        return {\"id\": 1, \"name\": \"example\"}\n\n\n## Shared dependency\n\n\nclass Database:\n    def list_items(self):\n        return [{\"id\": 1, \"name\": \"Item 1\"}, {\"id\": 2, \"name\": \"Item 2\"}]\n\n\ndef get_db() -&gt; Database:\n    return Database()\n\n\nclass ReadAPIView(AsyncListAPIView, AsyncRetrieveAPIView):\n    response_schema = APIModel\n\n    def __init__(\n        self, request: Request, response: Response, db: Database = Depends(get_db)\n    ) -&gt; None:\n        super().__init__(request, response)\n        self.db = db\n\n    async def list(self):\n        # response model automatically converted to list[APIModel]\n        return self.db.list_items()\n\n    async def retrieve(self, id: int):\n        for item in self.db.list_items():\n            if item[\"id\"] == id:\n                return item\n        return None  # raises NotFound\n\n\n## Registering views\n\nrouter = ViewRouter()\n\nrouter.register_view(BasicView, prefix=\"/view\")\nrouter.register_view(BasicAPIView, prefix=\"/apiview\")\n</code></pre>"},{"location":"usage/filters/","title":"Filters","text":""},{"location":"usage/filters/#available-filter-classes","title":"Available filter classes","text":"<ul> <li><code>BaseFilter</code> - base class for all filters</li> <li><code>ModelFilter</code> - class for filtering by pydantic model fields</li> <li><code>OrderingFilter</code> - class for ordering by fields</li> <li><code>SearchFilter</code> - class for searching by fields</li> <li><code>PaginationFilter</code> - class for pagination</li> <li><code>Filter</code> - All of the above</li> </ul>"},{"location":"usage/filters/#available-resolvers","title":"Available resolvers","text":"<ul> <li><code>ObjectFilterResolver</code> - class for filtering by object fields, works for lists of objects/dictionaries.</li> <li><code>SQLAlchemyFilterResolver</code> - class for filtering by SQLAlchemy model fields</li> </ul>"},{"location":"usage/filters/#helpers-dependencies","title":"Helpers &amp; Dependencies","text":"<ul> <li><code>NestedFilter</code> - class for filtering by nested fields</li> <li><code>FilterDependency</code> - class for filtering by dependencies</li> </ul>"},{"location":"usage/filters/#usage","title":"Usage","text":"<pre><code>class PostModel(Base):\n    __tablename__ = \"post\"\n    title: str = mapped_column(sa.String())\n    content: str = mapped_column(sa.String())\n    created_at: datetime = mapped_column(sa.DateTime())\n    user_id: int = mapped_column(sa.Integer(), sa.ForeignKey(\"user.id\"))\n\nclass UserModel(Base):\n    __tablename__ = \"user\"\n    id: int = mapped_column(sa.Integer(), primary_key=True)\n    name: str = mapped_column(sa.String())\n    email: str = mapped_column(sa.String())\n    created_at: datetime = mapped_column(sa.DateTime())\n\n\nclass PostFilter(ModelFilter):\n    title: str | None = None\n\n\nclass UserFilter(Filter):\n    name: str | None = None\n    email: str | None = None\n\n    post: PostFilter = NestedFilter(\n        PostFilter, prefix=\"post\"\n    ) # query parameter with become post__title\n\n    search_fields = {\"name\", \"email\", \"post__name\"}  # django-like syntax for search fields\n    ordering_fields = {\"name\", \"created_at\"}\n\n\nclass AsyncListView(AsyncListAPIView):\n\n    async def list(self, filter: Filter = FilterDepends(UserFilter), resolver: SQLAlchemyFilterResolver = Depends()):\n        queryset = resolver.apply_filter(filter, select(UserModel))\n        # applies ordering, pagination, searching etc.\n        async with self.db_session() as session:\n            users = await session.execute(queryset)\n            return users.scalars().all()\n</code></pre>"},{"location":"usage/opentelemetry/","title":"Opentelemetry","text":"<pre><code>import logging\nimport socket\n\nfrom fastapi import FastAPI\nfrom opentelemetry import trace\nfrom opentelemetry.instrumentation.logging import LoggingInstrumentor\nfrom opentelemetry.sdk.resources import Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import (\n    ConsoleSpanExporter,\n    SimpleSpanProcessor,\n)\n\nfrom fastapi_views import configure_app\n\nlogging.basicConfig(level=logging.INFO)\nresource = Resource(\n    attributes={\n        \"service.name\": \"test-api\",\n        \"service.version\": \"0.1.0\",\n        \"service.instance.id\": socket.gethostname(),\n    }\n)\nprovider = TracerProvider(resource=resource)\ntrace.set_tracer_provider(provider)\nprovider.add_span_processor(SimpleSpanProcessor(ConsoleSpanExporter()))\nLoggingInstrumentor().instrument()\n\n\napp = FastAPI(title=\"My API\")\n\nconfigure_app(app)\n\n\n@app.get(\"/test\")\nasync def raise_error():\n    # example of Internal Server Error being returned, with exception being recorded and correlation id returned\n    raise ValueError(\"Server side error\")\n</code></pre>"},{"location":"usage/viewset/","title":"Viewset","text":"<pre><code>from typing import ClassVar, Optional\nfrom uuid import UUID\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nfrom fastapi_views import ViewRouter, configure_app\nfrom fastapi_views.views.viewsets import AsyncAPIViewSet\n\n\nclass UpdateItemSchema(BaseModel):\n    name: str\n    price: int\n\n\nclass ItemSchema(BaseModel):\n    id: UUID\n    name: str\n    price: int\n\n\nclass MyViewSet(AsyncAPIViewSet):\n    api_component_name = \"Item\"\n    response_schema = ItemSchema\n    items: ClassVar[dict[UUID, ItemSchema]] = {}\n\n    async def list(self) -&gt; list[ItemSchema]:\n        return list(self.items.values())\n\n    async def create(self, item: ItemSchema) -&gt; ItemSchema:\n        self.items[item.id] = item\n        return item\n\n    async def retrieve(self, id: UUID) -&gt; Optional[ItemSchema]:\n        return self.items.get(id)\n\n    async def update(self, id: UUID, item: UpdateItemSchema) -&gt; ItemSchema:\n        self.items[id] = ItemSchema(id=id, name=item.name, price=item.price)\n        return self.items[id]\n\n    async def destroy(self, id: UUID) -&gt; None:\n        self.items.pop(id, None)\n\n\nrouter = ViewRouter(prefix=\"/items\")\nrouter.register_view(MyViewSet)\n\napp = FastAPI(title=\"My API\")\napp.include_router(router)\n\nconfigure_app(app)\n</code></pre>"}]}